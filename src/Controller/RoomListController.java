package Controller;

import Dao.DatabaseConnection;
import Dao.RoomDAO;
import Model.Room;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.stage.Stage;

import java.sql.Connection;
import java.sql.ResultSet;
import java.util.Objects;
import java.sql.PreparedStatement;

public class RoomListController {

    @FXML
    private TableView<Room> roomTable;
    @FXML
    private TableColumn<Room, String> idColumn;
    @FXML
    private TableColumn<Room, String> nameColumn;
    @FXML
    private TableColumn<Room, String> hostColumn;
    @FXML
    private TableColumn<Room, String> statusColumn;

    @FXML
    private TextField searchField;
    @FXML
    private Button searchButton;
    @FXML
    private Button refreshButton;

    @FXML
    private Button backButton;
    @FXML
    private Button joinRoomButton; // <-- th√™m field n√∫t "V√†o ph√≤ng"

    private ObservableList<Room> roomList = FXCollections.observableArrayList();
    private ObservableList<Room> filteredList = FXCollections.observableArrayList();

    private RoomDAO roomDAO;

    private String currentUser;

    public RoomListController() {
        // Initialize RoomDAO with a database connection
        Connection conn = DatabaseConnection.getConnection();
        roomDAO = new RoomDAO(conn);
    }

    @FXML
    public void initialize() {
        // Bind table columns to Room properties
        nameColumn.setCellValueFactory(cellData -> cellData.getValue().nameProperty());
        hostColumn.setCellValueFactory(cellData -> cellData.getValue().hostProperty());
        statusColumn.setCellValueFactory(cellData -> cellData.getValue().statusProperty());

        // Load room list from the database
        loadRoomList();

        // Set up search functionality
        searchButton.setOnAction(e -> searchRoom());

        // Refresh room list
        refreshButton.setOnAction(e -> loadRoomList());

        // Join room
        if (joinRoomButton != null) {
            joinRoomButton.setOnAction(e -> joinRoom());
        }

        // Back action
        backButton.setOnAction(e -> backAction());
    }

    private void loadRoomList() {
        try {
            roomList.clear();
            ResultSet rs = roomDAO.getWaitingRooms();
            while (rs.next()) {
                String name = rs.getString("room_name");
                String host = rs.getString("host");
                String password = rs.getString("password");

                // N·∫øu c√≥ m·∫≠t kh·∫©u th√¨ hi·ªán kh√≥a üîí, ng∆∞·ª£c l·∫°i hi·ªán üîì
                String status = (password != null && !password.isEmpty()) ? "üîí" : "üîì";

                roomList.add(new Room(name, host, status));
            }
            filteredList.setAll(roomList);
            roomTable.setItems(filteredList);
        } catch (Exception e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR, "Kh√¥ng th·ªÉ t·∫£i danh s√°ch ph√≤ng!");
            alert.showAndWait();
        }
    }


    private void searchRoom() {
        String keyword = searchField.getText().toLowerCase().trim();
        if (keyword.isEmpty()) {
            filteredList.setAll(roomList);
        } else {
            filteredList.setAll(roomList.filtered(
                    room -> room.getName().toLowerCase().contains(keyword)
            ));
        }
    }

    private void joinRoom() {
        Room selectedRoom = roomTable.getSelectionModel().getSelectedItem();
        if (selectedRoom == null) {
            Alert alert = new Alert(Alert.AlertType.WARNING, "Vui l√≤ng ch·ªçn m·ªôt ph√≤ng tr∆∞·ªõc!");
            alert.showAndWait();
            return;
        }

        try {
            // Tra c·ª©u l·∫°i m·∫≠t kh·∫©u c·ªßa ph√≤ng ƒë∆∞·ª£c ch·ªçn t·ª´ danh s√°ch ph√≤ng ch·ªù
            String requiredPassword = null;
            ResultSet rs = roomDAO.getWaitingRooms();
            while (rs.next()) {
                String name = rs.getString("room_name");
                if (selectedRoom.getName().equals(name)) {
                    requiredPassword = rs.getString("password");
                    break;
                }
            }

            final String expectedPassword = requiredPassword;
            final String roomName = selectedRoom.getName();
            final String host = selectedRoom.getHost();

            Runnable tryEnter = () -> {
                if (tryClaimGuest(roomName, host, currentUser)) {
                    openBoardAndCloseList(roomName);
                } else {
                    Alert alert = new Alert(Alert.AlertType.WARNING, "Ph√≤ng ƒë√£ ƒë·∫ßy ho·∫∑c ƒë√£ b·∫Øt ƒë·∫ßu!");
                    alert.showAndWait();
                    loadRoomList(); // l√†m m·ªõi l·∫°i danh s√°ch
                }
            };

            if (expectedPassword != null && !expectedPassword.isEmpty()) {
                // Ph√≤ng c√≥ m·∫≠t kh·∫©u -> y√™u c·∫ßu nh·∫≠p
                TextInputDialog dialog = new TextInputDialog();
                dialog.setTitle("Nh·∫≠p m·∫≠t kh·∫©u ph√≤ng");
                dialog.setHeaderText("Ph√≤ng \"" + roomName + "\" y√™u c·∫ßu m·∫≠t kh·∫©u");
                dialog.setContentText("M·∫≠t kh·∫©u:");
                dialog.getEditor().setPromptText("Nh·∫≠p m·∫≠t kh·∫©u...");

                dialog.showAndWait().ifPresentOrElse(input -> {
                    if (Objects.equals(expectedPassword, input)) {
                        tryEnter.run();
                    } else {
                        Alert alert = new Alert(Alert.AlertType.ERROR, "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!");
                        alert.showAndWait();
                    }
                }, () -> {
                    // ng∆∞·ªùi d√πng h·ªßy
                });
            } else {
                // Kh√¥ng c√≥ m·∫≠t kh·∫©u -> v√†o th·∫≥ng
                tryEnter.run();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR, "Kh√¥ng th·ªÉ ki·ªÉm tra m·∫≠t kh·∫©u ph√≤ng!");
            alert.showAndWait();
        }
    }

    // C·ªë g·∫Øng ghi t√™n ng∆∞·ªùi v√†o ph√≤ng (c·ªôt guest), ch·ªâ th√†nh c√¥ng n·∫øu ph√≤ng ch∆∞a c√≥ kh√°ch
    private boolean tryClaimGuest(String roomName, String host, String guestName) {
        if (guestName == null || guestName.isEmpty()) return false;
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement ps = conn.prepareStatement(
                     "UPDATE rooms SET guest=? WHERE room_name=? AND host=? AND (guest IS NULL OR guest='')")) {
            ps.setString(1, guestName);
            ps.setString(2, roomName);
            ps.setString(3, host);
            int updated = ps.executeUpdate();
            return updated > 0;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    private void openBoardAndCloseList(String roomName) {
        try {
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/View/board.fxml"));
            Parent root = loader.load();

            // ‚úÖ Truy·ªÅn user sang BoardController
            BoardController boardController = loader.getController();
            boardController.setCurrentUser(currentUser);

            // ƒê√≥ng c·ª≠a s·ªï danh s√°ch ph√≤ng
            Stage current = (Stage) roomTable.getScene().getWindow();
            // M·ªü b√†n c·ªù tr√™n c√πng stage ƒë·ªÉ m∆∞·ª£t h∆°n
            current.setTitle("Ph√≤ng: " + roomName);
            current.setScene(new javafx.scene.Scene(root));
            current.show();
        } catch (Exception e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR, "Kh√¥ng th·ªÉ m·ªü b√†n c·ªù!");
            alert.showAndWait();
        }
    }

    private void backAction() {
        try {
            // L·∫•y stage hi·ªán t·∫°i t·ª´ backButton
            javafx.stage.Stage stage = (javafx.stage.Stage) backButton.getScene().getWindow();
            stage.close(); // ƒê√≥ng c·ª≠a s·ªï hi·ªán t·∫°i

            // Load l·∫°i m√†n h√¨nh Home
            javafx.fxml.FXMLLoader loader = new javafx.fxml.FXMLLoader(getClass().getResource("/View/Home.fxml"));
            javafx.scene.Parent root = loader.load();

            // L·∫•y HomeController ƒë·ªÉ truy·ªÅn user
            Controller.HomeController homeController = loader.getController();
            homeController.setCurrentUser(currentUser); // Truy·ªÅn user ƒë√£ ƒëƒÉng nh·∫≠p

            // M·ªü c·ª≠a s·ªï Home
            javafx.stage.Stage homeStage = new javafx.stage.Stage();
            homeStage.setTitle("Trang ch·ªß");
            homeStage.setScene(new javafx.scene.Scene(root));
            homeStage.show();
        } catch (Exception e) {
            e.printStackTrace();
            Alert alert = new Alert(Alert.AlertType.ERROR, "Kh√¥ng th·ªÉ quay l·∫°i trang tr∆∞·ªõc!");
            alert.showAndWait();
        }
    }


    // Method to set the current user
    public void setCurrentUser(String username) {
        this.currentUser = username;
        System.out.println("Current user set to: " + username);
        // You can use this variable to customize the room list or perform user-specific actions
    }
}